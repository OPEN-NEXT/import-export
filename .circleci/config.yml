version: 2.1

orbs:
  docker: circleci/docker@1.5.0

jobs:
  build:
    docker:
      - image: "circleci/python:3.7"
        environment:
          PIPENV_VENV_IN_PROJECT: true
      - image: circleci/postgres
        command: postgres -c 'fsync=off' -c 'synchronous_commit=off' -c 'full_page_writes=off'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgtres
      - image: circleci/redis

    resource_class: small

    working_directory: ~/import-export

    steps:

      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - restore_cache:
          name: restore pipenv cache
          key: venv-python-3.7-{{ checksum "Pipfile.lock" }}

      - run:
          name: pipenv
          command: |
            sudo pip install pipenv
            pipenv install --dev
          when: always

      - save_cache:
          name: save pipenv cache
          key: venv-python-3.7-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv

      - restore_cache:
          name: restore pre-commit cache
          key: pre-commit-{{ checksum ".pre-commit-config.yaml" }}

      - run:
          name: pre-commit checks
          command: |
            pipenv run pre-commit install
            pipenv run pre-commit run --all --show-diff-on-failure
          when: always

      - save_cache:
          name: save pre-commit cache
          key: pre-commit-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

      - docker/check:
          docker-username: CIRCLE_PROJECT_USERNAME
          docker-password: GITHUB_TOKEN
          registry: $DOCKER_REGISTRY
          use-docker-credentials-store: true

      - run:
          name: unit-tests
          environment:
            PIPENV_DONT_LOAD_ENV: true
            DOMAIN: localhost
            SERVER_NAME: localhost
            SERVER_HOST: http://localhost
            BACKEND_CORS_ORIGINS: "[\"http://localhost:8000\"]"
            POSTGRES_SERVER: localhost
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: postgres
            PYTEST_POSTGRES_SERVER: localhost
            PYTEST_POSTGRES_USER: postgres
            PYTEST_POSTGRES_PASSWORD: postgres
            PYTEST_POSTGRES_DB: test
            JOBS_BASE_PATH: /tmp
            BROKER_URL: redis://redis:6379/0
          command: |
            rm -f ~/.gitconfig
            mkdir test-results
            pipenv run pytest --junitxml=test-results/junit.xml
          when: always  # run even if there is a flake8 error

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      - run:
          name: Set up docker image names variables
          command: |
            echo 'export TRIM_BRANCH=`echo $CIRCLE_BRANCH | sed -r 's,/,-,g'`' >> $BASH_ENV
            echo 'export SHORT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
            source $BASH_ENV
            echo export TAG=$TRIM_BRANCH.$CIRCLE_BUILD_NUM.$SHORT_HASH >> $BASH_ENV
            echo export DOCKER_IMAGE_BACKEND=$DOCKER_REGISTRY/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-backend >> $BASH_ENV
            echo export DOCKER_IMAGE_CELERYWORKER=$DOCKER_REGISTRY/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-celeryworker >> $BASH_ENV

      - run:
          name: Build using docker-compose
          command: |
            docker-compose -f docker-compose.yaml build
            docker tag $DOCKER_IMAGE_BACKEND:$TAG $DOCKER_IMAGE_BACKEND:$TRIM_BRANCH

      - run:
          name: Push using docker-compose
          command: |
            docker-compose -f docker-compose.yaml push

      - when:
          condition:
            or: 
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ production, << pipeline.git.branch >> ]
              - equal: [ feature/circle-deployment, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Set deployment environment and target
                command: |
                  sudo apt-get -y install gettext-base
                  if [ "${CIRCLE_BRANCH}" == "production" ]; then
                    echo 'export ENVIRONMENT=PRODUCTION' >> $BASH_ENV
                  else
                    echo 'export ENVIRONMENT=STAGING' >> $BASH_ENV
                  fi
                  echo 'export DEPLOYMENT_TARGET=$(echo \$DEPLOY_$ENVIRONMENT\_TARGET | envsubst)' >> $BASH_ENV

            - run:
                name: Copy .env and docker-compose.yaml
                command: |
                  sed -i "s/{ENVIRONMENT}/$ENVIRONMENT/g" .circleci/.template.env
                  envsubst < .circleci/.template.env > target.env
                  scp -oStrictHostKeyChecking=no target.env $DEPLOYMENT_TARGET:~/.env
                  scp -oStrictHostKeyChecking=no docker-compose.yaml $DEPLOYMENT_TARGET:~/docker-compose.yaml

            - run:
                name: Update and run docker-compose
                command: |
                  ssh -v -oStrictHostKeyChecking=no $DEPLOYMENT_TARGET 'docker-compose pull'
                  ssh -v -oStrictHostKeyChecking=no $DEPLOYMENT_TARGET 'docker-compose up -d'